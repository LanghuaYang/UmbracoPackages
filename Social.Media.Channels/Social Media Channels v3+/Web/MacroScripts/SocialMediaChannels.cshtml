@inherits umbraco.MacroEngines.DynamicNodeContext
@using umbraco.NodeFactory;
@using umbraco.MacroEngines;
@using System.Configuration;
@{
    var nodeId = Parameter.NodeID;
    DynamicNode node = Library.NodeById(nodeId);
    string ThemesFolder = ConfigurationManager.AppSettings["SocialMediaThemeFolder"] == null ? "~/usercontrols/themes/" : ConfigurationManager.AppSettings["SocialMediaThemeFolder"].ToString();
    Social_Media_Channels.Engine.Manager manager = new Social_Media_Channels.Engine.Manager(ThemesFolder, false, true);
    Social_Media_Channels.Engine.Manager tmp;
    string propertyName = "social"; //set the property name in case it was changed

    try
    {
        tmp = Social_Media_Channels.Engine.Utilities.JsonHelper.JsonDeserialize<Social_Media_Channels.Engine.Manager>(node.GetPropertyValue(propertyName));
        manager.ShowLabels = tmp.ShowLabels;
        manager.LoadSelectedTheme(tmp.CurrentThemeID);
        manager.LoadSavedUrls(manager.CurrentTheme, tmp.CurrentTheme);

    }
    catch {       tmp = new Social_Media_Channels.Engine.Manager(ThemesFolder, false, true);    }
}
<ul class="social-channels" id="social-channels">
    @if (tmp.CurrentTheme != null)
    {
        foreach (Social_Media_Channels.Entities.Channel channel in manager.CurrentTheme.Channels)
        {
            if (channel.Url != "")
            {
                <li class="social-channel">
                    @Html.Raw(Social_Media_Channels.Engine.Manager.RenderRawA(manager.CurrentTheme, channel))
                    @if (manager.ShowLabels)
                    {
                        <span class="label"><a href="@channel.Url" target="_blank">@channel.Name</a></span>
                    }
                </li>
            }
        }
    }
    else
    {
        <li class="social-channel">No Channels were found, please check your settings</li>
    }
</ul>