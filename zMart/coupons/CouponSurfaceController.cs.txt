using SternsPools.Core.Interfaces;
using SternsPools.Core.Models;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Web.Mvc;
using Umbraco.Web;
using Umbraco.Web.Mvc;

namespace SternsPools.Web.Api
{
    public class CouponSurfaceController : SurfaceController
    {
        private readonly ICoupon _couponService;
        private readonly UmbracoHelper _umbracoHelper;

        public CouponSurfaceController(ICoupon couponService)
        {
            _couponService = couponService;
            _umbracoHelper = new UmbracoHelper(UmbracoContext.Current);
        }

        [HttpGet]
        public async Task<JsonResult> GetAllCoupons(bool isUsed = false)
        {
            if (isUsed) return Json(await _couponService.GetAllUsedCoupons(), JsonRequestBehavior.AllowGet);
            else return Json(await _couponService.GetAllCoupons(), JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public async Task<JsonResult> NewCoupons(int howMany)
        {
            int counter = 0;
            var coupons = new List<Coupon>();
            do
            {
                var coupon = await NewCoupon();
                coupons.Add(coupon);
                counter++;
            } while (counter < howMany);

            return Json(coupons, JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public async Task<Coupon> NewCoupon()
        {
            return await _couponService.NewCoupon();
        }
        [HttpGet]
        public async Task<JsonResult> EditCoupons(int[] Ids, string Amount, string Expiration, bool Active)
        {
            for (int i = 0; i < Ids.Length; i++)
            {
                var coupon = await _couponService.GetCoupon(Ids[i]);
                coupon.Active = Active;
                coupon.Amount = decimal.Parse(Amount);
                coupon.Expiration = Convert.ToDateTime(Expiration);
                await _couponService.EditCoupon(coupon);
            }
            return Json(Ids, JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public async Task<JsonResult> Activate(int couponId)
        {
            await _couponService.ActivateCoupon(couponId);
            return Json(couponId, JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public async Task<JsonResult> Deactivate(int couponId)
        {
            await _couponService.DeactivateCoupon(couponId);
            return Json(couponId, JsonRequestBehavior.AllowGet);
        }
        [HttpGet]
        public async Task<JsonResult> Delete(int[] coupons)
        {
            for (int i = 0; i < coupons.Length; i++)
                await _couponService.DeleteCoupon(coupons[i]);

            return Json(coupons, JsonRequestBehavior.AllowGet);
        }
    }
}